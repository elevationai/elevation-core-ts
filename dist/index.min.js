var G=(i=>(i[i.PNR_RETRIEVAL=1]="PNR_RETRIEVAL",i[i.BAGTAG_PRINT=2]="BAGTAG_PRINT",i[i.PAPER_LOW=3]="PAPER_LOW",i[i.PAPER_OUT=4]="PAPER_OUT",i[i.UPPER_DOOR_OPEN=5]="UPPER_DOOR_OPEN",i[i.UPPER_DOOR_CLOSED=6]="UPPER_DOOR_CLOSED",i[i.LOWER_DOOR_OPEN=7]="LOWER_DOOR_OPEN",i[i.LOWER_DOOR_CLOSED=8]="LOWER_DOOR_CLOSED",i[i.PASS_SCANNED=9]="PASS_SCANNED",i[i.ONLINE=10]="ONLINE",i[i.OFFLINE=11]="OFFLINE",i[i.IN_SERVICE=12]="IN_SERVICE",i[i.OUT_OF_SERVICE=13]="OUT_OF_SERVICE",i[i.PAPER_JAM=14]="PAPER_JAM",i[i.TOO_LATE_FOR_FLIGHT=15]="TOO_LATE_FOR_FLIGHT",i[i.TOO_EARLY_FOR_FLIGHT=16]="TOO_EARLY_FOR_FLIGHT",i[i.INCORRECT_LOCATION=17]="INCORRECT_LOCATION",i[i.RESERVATION_NOT_FOUND=18]="RESERVATION_NOT_FOUND",i[i.BOARDING_PASS_INVALID=19]="BOARDING_PASS_INVALID",i[i.NOT_CHECKED_IN=120]="NOT_CHECKED_IN",i[i.INELIGIBLE=121]="INELIGIBLE",i[i.INTERNATIONAL=122]="INTERNATIONAL",i[i.PREVIOUSLY_PRINTED=123]="PREVIOUSLY_PRINTED",i[i.NO_BAGS=64]="NO_BAGS",i[i.WRONG_AIRLINE=65]="WRONG_AIRLINE",i[i.PRINTER_FAILURE=66]="PRINTER_FAILURE",i[i.UNAUTHORIZED_CROSSING_ENTRANCE=20]="UNAUTHORIZED_CROSSING_ENTRANCE",i[i.UNAUTHORIZED_CROSSING_EXIT=21]="UNAUTHORIZED_CROSSING_EXIT",i[i.FRAUD_CRAWLING=22]="FRAUD_CRAWLING",i[i.FRAUD_JUMP=23]="FRAUD_JUMP",i[i.UNAUTHORIZED_STANDING_AT_ENTRANCE=24]="UNAUTHORIZED_STANDING_AT_ENTRANCE",i[i.UNAUTHORIZED_STANDING_AT_EXIT=25]="UNAUTHORIZED_STANDING_AT_EXIT",i[i.STOP_IN_GATE=26]="STOP_IN_GATE",i[i.ONE_BOARD_ONE_LEFT_ENTRANCE=27]="ONE_BOARD_ONE_LEFT_ENTRANCE",i[i.TWO_BOARDED=28]="TWO_BOARDED",i[i.ONE_BOARDED_ONE_CROSSED=29]="ONE_BOARDED_ONE_CROSSED",i[i.ONE_CROSSED_LEFT_ENTRANCE=30]="ONE_CROSSED_LEFT_ENTRANCE",i[i.ONE_BOARDED_THEN_LEFT_VIA_ENTRANCE=31]="ONE_BOARDED_THEN_LEFT_VIA_ENTRANCE",i[i.BOARDED_WITHOUT_AUTHORIZATION=32]="BOARDED_WITHOUT_AUTHORIZATION",i[i.CROSSING_ENTRANCE_TIMEOUT=33]="CROSSING_ENTRANCE_TIMEOUT",i[i.CROSSING_EXIT_TIMEOUT=34]="CROSSING_EXIT_TIMEOUT",i[i.EXIT_NOT_CLEARED_TIMEOUT=35]="EXIT_NOT_CLEARED_TIMEOUT",i[i.GATE_ENTRY_TIMEOUT=36]="GATE_ENTRY_TIMEOUT",i[i.GATE_CROSSING_TIMEOUT=37]="GATE_CROSSING_TIMEOUT",i[i.MANTRAP_VALIDATION_TIMEOUT=38]="MANTRAP_VALIDATION_TIMEOUT",i[i.EXIT_AREA_CLEAR=39]="EXIT_AREA_CLEAR",i[i.EXIT_AREA_OCCUPIED=40]="EXIT_AREA_OCCUPIED",i[i.SELF_BOARDING_COMPLETE=41]="SELF_BOARDING_COMPLETE",i[i.NO_PASS_FIRST_SENSOR=42]="NO_PASS_FIRST_SENSOR",i[i.NO_PASS_LAST_SENSOR=43]="NO_PASS_LAST_SENSOR",i[i.BOARDING_CANCELED=44]="BOARDING_CANCELED",i[i.SENSOR_FAILURE=45]="SENSOR_FAILURE",i[i.FLAPS_FAILURE=46]="FLAPS_FAILURE",i[i.PAPER_RESTOCK=47]="PAPER_RESTOCK",i[i.SESSION_TIME=48]="SESSION_TIME",i[i.ALARM=49]="ALARM",i[i.EXIT_BLOCKED=50]="EXIT_BLOCKED",i[i.INCORRECT_GATE=51]="INCORRECT_GATE",i[i.GATE_OPEN=52]="GATE_OPEN",i[i.GATE_CLOSED=53]="GATE_CLOSED",i[i.GATE_AUTHORIZED=54]="GATE_AUTHORIZED",i[i.EMERGENCY=55]="EMERGENCY",i[i.MAINTENANCE=56]="MAINTENANCE",i[i.BOARDING_PASS_PREVIOUSLY_USED=57]="BOARDING_PASS_PREVIOUSLY_USED",i[i.GATE_INOPERABLE=58]="GATE_INOPERABLE",i[i.GATE_EMPLOYEE_AUTHORIZED=59]="GATE_EMPLOYEE_AUTHORIZED",i[i.FREESTATE=60]="FREESTATE",i[i.CONTROLSTATE=61]="CONTROLSTATE",i[i.PRMMODE=62]="PRMMODE",i[i.AIRLINE_PASS=63]="AIRLINE_PASS",i[i.BOARDING_PASS_PRINT=68]="BOARDING_PASS_PRINT",i[i.APPLICATION_AVAILABLE=69]="APPLICATION_AVAILABLE",i[i.APPLICATION_UNAVAILABLE=70]="APPLICATION_UNAVAILABLE",i[i.APPLICATION_ACTIVE=71]="APPLICATION_ACTIVE",i[i.APPLICATION_STOP=72]="APPLICATION_STOP",i[i.PASSPORT_SCANNED=73]="PASSPORT_SCANNED",i[i.BAGTAG_PRINTER_ONLINE=74]="BAGTAG_PRINTER_ONLINE",i[i.BAGTAG_PRINTER_OFFLINE=75]="BAGTAG_PRINTER_OFFLINE",i[i.BARCODE_READER_ONLINE=76]="BARCODE_READER_ONLINE",i[i.BARCODE_READER_OFFLINE=77]="BARCODE_READER_OFFLINE",i[i.PASSPORT_READER_ONLINE=78]="PASSPORT_READER_ONLINE",i[i.PASSPORT_READER_OFFLINE=79]="PASSPORT_READER_OFFLINE",i[i.BOARDINGPASS_PRINTER_ONLINE=90]="BOARDINGPASS_PRINTER_ONLINE",i[i.BOARDINGPASS_PRINTER_OFFLINE=91]="BOARDINGPASS_PRINTER_OFFLINE",i[i.BOARDINGPASS_PRINTER_PAPER_OUT=92]="BOARDINGPASS_PRINTER_PAPER_OUT",i[i.BOARDINGPASS_PRINTER_PAPER_LOW=93]="BOARDINGPASS_PRINTER_PAPER_LOW",i[i.BOARDINGPASS_PRINTER_PAPER_JAM=94]="BOARDINGPASS_PRINTER_PAPER_JAM",i[i.BOARDINGPASS_PRINTER_PAPER_RESTOCK=95]="BOARDINGPASS_PRINTER_PAPER_RESTOCK",i[i.BOARDINGPASS_PRINTER_FAILURE=96]="BOARDINGPASS_PRINTER_FAILURE",i[i.CONFIGURATION_REQUESTED=103]="CONFIGURATION_REQUESTED",i[i.CONFIGURATION_COMPLETED=110]="CONFIGURATION_COMPLETED",i[i.PASSENGER_CHECK_IN=104]="PASSENGER_CHECK_IN",i[i.PASSENGER_CHECK_IN_FAILED=105]="PASSENGER_CHECK_IN_FAILED",i[i.BAGTAG_PRINT_FAILURE=106]="BAGTAG_PRINT_FAILURE",i[i.APPLICATION_ACTIVE_ACCESSIBLE=108]="APPLICATION_ACTIVE_ACCESSIBLE",i[i.APPLICATION_INITIALIZE=109]="APPLICATION_INITIALIZE",i[i.CARDREADER_ONLINE=111]="CARDREADER_ONLINE",i[i.CARDREADER_OFFLINE=112]="CARDREADER_OFFLINE",i[i.CARDREADER_FAILURE=113]="CARDREADER_FAILURE",i[i.CARDREADER_READ=114]="CARDREADER_READ",i[i.ANNOUNCEMENT_ONLINE=115]="ANNOUNCEMENT_ONLINE",i[i.ANNOUNCEMENT_OFFLINE=116]="ANNOUNCEMENT_OFFLINE",i[i.KEYPAD_ONLINE=117]="KEYPAD_ONLINE",i[i.KEYPAD_OFFLINE=118]="KEYPAD_OFFLINE",i[i.ILLUMINATION_ONLINE=119]="ILLUMINATION_ONLINE",i[i.ILLUMINATION_OFFLINE=124]="ILLUMINATION_OFFLINE",i[i.HEADSET_ONLINE=125]="HEADSET_ONLINE",i[i.HEADSET_OFFLINE=126]="HEADSET_OFFLINE",i[i.FEEDER_ONLINE=127]="FEEDER_ONLINE",i[i.FEEDER_OFFLINE=128]="FEEDER_OFFLINE",i[i.DISPENSER_ONLINE=129]="DISPENSER_ONLINE",i[i.DISPENSER_OFFLINE=130]="DISPENSER_OFFLINE",i[i.NO_DOCV=131]="NO_DOCV",i[i.DOCS_VERIFIED_PRINTING_ALLOWED=132]="DOCS_VERIFIED_PRINTING_ALLOWED",i[i.GROUP_BOOKING_NOT_SUPPORTED=135]="GROUP_BOOKING_NOT_SUPPORTED",i[i.ERROR_GENERIC=400]="ERROR_GENERIC",i[i.USER_LOGIN=107]="USER_LOGIN",i[i.TEST_ENV=215]="TEST_ENV",i[i.AGENT_LOGIN_ACTIVATION=200]="AGENT_LOGIN_ACTIVATION",i[i.AGENT_LOGOUT_ACTIVATION=201]="AGENT_LOGOUT_ACTIVATION",i[i.PAX_ACTIVATION_TIME=202]="PAX_ACTIVATION_TIME",i[i.BAG_TAG_NOT_FOUND=204]="BAG_TAG_NOT_FOUND",i[i.EXPIRED_DRIVERS_LICENSE=205]="EXPIRED_DRIVERS_LICENSE",i[i.VALID_DRIVERS_LICENSE=206]="VALID_DRIVERS_LICENSE",i[i.NOT_PART_OF_RESERVATION=207]="NOT_PART_OF_RESERVATION",i[i.ID_MATCH_NOT_FOUND=208]="ID_MATCH_NOT_FOUND",i[i.BAG_ALREADY_ACTIVATED=209]="BAG_ALREADY_ACTIVATED",i[i.UNABLE_TO_ACTIVATE_BAG=210]="UNABLE_TO_ACTIVATE_BAG",i[i.INVALID_BAGTAG=216]="INVALID_BAGTAG",i[i.BOARDED=211]="BOARDED",i[i.BEGIN_BOARDING_FAILED=212]="BEGIN_BOARDING_FAILED",i[i.BOARDING_ENDED=213]="BOARDING_ENDED",i[i.BOARDING_FAILED=214]="BOARDING_FAILED",i[i.INVALID_BOARDING_PASS=217]="INVALID_BOARDING_PASS",i[i.FLIGHT_SCANNED_MISMATCH=218]="FLIGHT_SCANNED_MISMATCH",i[i.SCANNED_WITHOUT_STARTING=219]="SCANNED_WITHOUT_STARTING",i[i.BOARDING_STARTED=220]="BOARDING_STARTED",i[i.ZONING_ATTEMPT_FAILED=221]="ZONING_ATTEMPT_FAILED",i[i.ZONING_CHNAGE=222]="ZONING_CHNAGE",i[i.ZONING_TIME=223]="ZONING_TIME",i[i.FLIGHT_ROOM_JOINED=224]="FLIGHT_ROOM_JOINED",i[i.FLIGHT_ROOM_LEFT=225]="FLIGHT_ROOM_LEFT",i[i.MANIFEST_SUCCESS=226]="MANIFEST_SUCCESS",i[i.MANIFEST_ERROR=227]="MANIFEST_ERROR",i[i.SOCKET_COMMAND=228]="SOCKET_COMMAND",i[i.REQUEST_PROFILING=203]="REQUEST_PROFILING",i[i.FAILED_TO_READ_BAG_TAG=300]="FAILED_TO_READ_BAG_TAG",i[i.BAG_TAG_FOUND=301]="BAG_TAG_FOUND",i[i.BAG_SETTLED=302]="BAG_SETTLED",i[i.BAG_AT_ENTRY=303]="BAG_AT_ENTRY",i[i.BAG_IN_HOLDING_AREA=304]="BAG_IN_HOLDING_AREA",i[i.WAITING_ON_BHS=305]="WAITING_ON_BHS",i[i.INTRUSION_DETECTED=306]="INTRUSION_DETECTED",i[i.NO_BAG_DETECTED=307]="NO_BAG_DETECTED",i[i.TRYING_TO_ACQUIRE_BAG_TAG=308]="TRYING_TO_ACQUIRE_BAG_TAG",i[i.BAG_RELEASED=309]="BAG_RELEASED",i[i.MOVE_TO_HOLDING_AREA=310]="MOVE_TO_HOLDING_AREA",i[i.CANCEL_NEED_INTERVENTION=311]="CANCEL_NEED_INTERVENTION",i[i.CANCEL_PASSENGER_CAN_FIX=312]="CANCEL_PASSENGER_CAN_FIX",i[i.MULTIPLE_BAG_TAGS_ERROR=313]="MULTIPLE_BAG_TAGS_ERROR",i[i.MULTIPLE_BAGS_ERROR=314]="MULTIPLE_BAGS_ERROR",i[i.HOLDING_AREA_FULL=315]="HOLDING_AREA_FULL",i[i.BAG_CANNOT_RELEASE=316]="BAG_CANNOT_RELEASE",i[i.BAG_CANNOT_PROCESS=317]="BAG_CANNOT_PROCESS",i[i.CONVEY_BELT_INOPERABLE=318]="CONVEY_BELT_INOPERABLE",i[i.UNKNOWN_SBD_ERROR=319]="UNKNOWN_SBD_ERROR",i[i.BAG_OVER_LENGTH=320]="BAG_OVER_LENGTH",i[i.BAG_OVER_HEIGHT=321]="BAG_OVER_HEIGHT",i[i.BAG_JAMMED_INSIDE=322]="BAG_JAMMED_INSIDE",i[i.UNEXPECTED_BAG_IN_REAR=323]="UNEXPECTED_BAG_IN_REAR",i[i.BAG_TOO_FLAT=324]="BAG_TOO_FLAT",i[i.BAG_TOO_SHORT=325]="BAG_TOO_SHORT",i[i.BAG_OVERWEIGHT=326]="BAG_OVERWEIGHT",i[i.BAG_UNDERWEIGHT=327]="BAG_UNDERWEIGHT",i[i.BAG_NOT_SETTLED=328]="BAG_NOT_SETTLED",i[i.BAG_NOT_CONVEYABLE=329]="BAG_NOT_CONVEYABLE",i[i.BHS_OFFLINE=330]="BHS_OFFLINE",i[i.BHS_BUSY=331]="BHS_BUSY",i[i.FRONT_BAG_BLOCKING_REAR_RETURN=332]="FRONT_BAG_BLOCKING_REAR_RETURN",i[i.TECHNICAL_ERROR=333]="TECHNICAL_ERROR",i[i.BAG_UNEXPECTEDLY_REMOVED=334]="BAG_UNEXPECTEDLY_REMOVED",i))(G||{});var U=(c=>(c[c.CUSS=1]="CUSS",c[c.NONCUSS=2]="NONCUSS",c[c.SELF_BOARDING_MODE=5]="SELF_BOARDING_MODE",c[c.LOCKED_MODE=6]="LOCKED_MODE",c[c.OPEN_MODE=7]="OPEN_MODE",c[c.DEBOARDING_MODE=8]="DEBOARDING_MODE",c[c.EMERGENCY_MODE=9]="EMERGENCY_MODE",c[c.MAINTENANCE_MODE=10]="MAINTENANCE_MODE",c))(U||{});var F=(o=>(o[o.TAGGING_KIOSK=1]="TAGGING_KIOSK",o[o.CHECKIN_KIOSK=2]="CHECKIN_KIOSK",o[o.GATE=3]="GATE",o[o.ADMIN_PANEL=4]="ADMIN_PANEL",o[o.HUB=5]="HUB",o[o.CUSTOM_APP=6]="CUSTOM_APP",o[o.PLATFORM=7]="PLATFORM",o[o.PROXY=8]="PROXY",o[o.EXTERNAL_API=9]="EXTERNAL_API",o))(F||{});var L=(a=>(a[a.SUCCESS=200]="SUCCESS",a[a.MODE_CHANGE=300]="MODE_CHANGE",a[a.FAILURE=400]="FAILURE",a[a.CRITICAL_FAILURE=500]="CRITICAL_FAILURE",a[a.INFRACTION=501]="INFRACTION",a[a.TIMEOUT=502]="TIMEOUT",a))(L||{});var y=(r=>(r[r.INFO=0]="INFO",r[r.DELAYED=1]="DELAYED",r[r.ERROR=2]="ERROR",r[r.CRITICAL=3]="CRITICAL",r))(y||{});function E(){return crypto.randomUUID()}var f=class{constructor(e,t){this.fn=e;this.delay=t}timeoutId=null;lastCall=0;call(...e){let t=Date.now();t-this.lastCall<this.delay||(this.timeoutId&&clearTimeout(this.timeoutId),this.lastCall=t,this.fn(...e))}async callAsync(...e){let t=Date.now();if(!(t-this.lastCall<this.delay))return this.timeoutId&&clearTimeout(this.timeoutId),this.lastCall=t,await this.fn(...e)}reset(){this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null),this.lastCall=0}},h=class{listeners=[];subscribe(e){return this.listeners.push(e),()=>{let t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)}}emit(e){this.listeners.forEach(t=>t(e))}clear(){this.listeners=[]}get listenerCount(){return this.listeners.length}},I=class{constructor(e=6e4,t=!0){this.ttl=e;t&&this.startAutoCleanup()}cache=new Map;cleanupInterval=null;set(e,t,s){let r=Date.now()+(s||this.ttl);this.cache.set(e,{value:t,expires:r})}get(e){let t=this.cache.get(e);if(t){if(Date.now()>t.expires){this.cache.delete(e);return}return t.value}}has(e){return this.get(e)!==void 0}delete(e){return this.cache.delete(e)}clear(){this.cache.clear()}startAutoCleanup(){this.cleanupInterval=setInterval(()=>{let e=Date.now();for(let[t,s]of this.cache.entries())e>s.expires&&this.cache.delete(t)},this.ttl)}destroy(){this.cleanupInterval&&(clearInterval(this.cleanupInterval),this.cleanupInterval=null),this.clear()}};function N(u=new Date){return u.toISOString()}var m=class{queue=[];processing=!1;batchSize;batchDelay;processor;timeoutId=null;constructor(e,t=100,s=1e3){this.processor=e,this.batchSize=t,this.batchDelay=s}add(e){this.queue.push(e),this.queue.length>=this.batchSize?this.processBatch():this.scheduleProcessing()}scheduleProcessing(){this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(()=>{this.processBatch()},this.batchDelay)}async processBatch(){if(this.processing||this.queue.length===0)return;this.processing=!0,this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null);let e=this.queue.splice(0,this.batchSize);try{await this.processor(e)}catch(t){console.error("Batch processing error:",t)}finally{this.processing=!1,this.queue.length>0&&this.scheduleProcessing()}}async flush(){for(;this.queue.length>0;)await this.processBatch()}get queueSize(){return this.queue.length}};var p=class{coreInfo=null;configured=!1;headers=new Headers;constructor(e){e&&this.config(e)}config(e){this.validateCoreInfo(e),this.coreInfo=e,this.setupHeaders(),this.configured=!0}validateCoreInfo(e){if(!e.token)throw new Error("Token is required in CoreInfo");if(!e.serviceEndpoint)throw new Error("Service endpoint is required in CoreInfo")}setupHeaders(){this.coreInfo&&(this.headers=new Headers({Authorization:`Bearer ${this.coreInfo.token}`,"Content-Type":"application/json",Accept:"application/json","X-Device-Fingerprint":this.coreInfo.fingerPrint||"","X-Secondary-App":this.coreInfo.secondary?"true":"false"}))}checkConfiguration(){if(!this.configured||!this.coreInfo)throw new Error("Service not configured. Call config() first with CoreInfo")}async makeRequest(e,t={}){this.checkConfiguration();let s=`${this.coreInfo.serviceEndpoint}${e}`,r=this.coreInfo.timeout||3e4,n=new AbortController,a=setTimeout(()=>n.abort(),r);try{let l=await fetch(s,{...t,headers:{...Object.fromEntries(this.headers.entries()),...Object.fromEntries(new Headers(t.headers||{}).entries())},signal:n.signal});if(clearTimeout(a),!l.ok)throw new Error(`HTTP error! status: ${l.status}`);return{success:!0,data:await l.json()}}catch(l){return clearTimeout(a),l instanceof Error?l.name==="AbortError"?{success:!1,error:"Request timeout",message:`Request timed out after ${r}ms`}:{success:!1,error:l.message}:{success:!1,error:"Unknown error occurred"}}}async post(e,t){return this.makeRequest(e,{method:"POST",body:JSON.stringify(t)})}async get(e){return this.makeRequest(e,{method:"GET"})}async put(e,t){return this.makeRequest(e,{method:"PUT",body:JSON.stringify(t)})}async delete(e){return this.makeRequest(e,{method:"DELETE"})}},O=class{maxRetries;retryDelay;backoffMultiplier;constructor(e=3,t=1e3,s=2){this.maxRetries=e,this.retryDelay=t,this.backoffMultiplier=s}async execute(e,t){let s,r=this.retryDelay;for(let n=0;n<=this.maxRetries;n++)try{return await e()}catch(a){if(s=a,n===this.maxRetries||t&&!t(a))throw a;await this.sleep(r),r*=this.backoffMultiplier}throw s}sleep(e){return new Promise(t=>setTimeout(t,e))}};var g=class extends p{defaults={};debouncedEvents=new Map;batchProcessor;constructor(e){super(e),this.batchProcessor=new m(async t=>await this.sendBatch(t),50,1e3)}setDefaults(e){this.defaults={...e},e.debounceEvent&&e.debounceEvent.forEach(({eventCode:t,debounce:s})=>{this.debouncedEvents.set(t,{eventCode:t,lastSent:0,debounceTime:s,once:!1})}),e.debounceOnce&&e.debounceOnce.forEach(({eventCode:t,debounce:s})=>{this.debouncedEvents.set(t,{eventCode:t,lastSent:0,debounceTime:s,once:!0})})}shouldDebounce(e){let t=this.debouncedEvents.get(e);if(!t)return!1;let s=Date.now();return s-t.lastSent<t.debounceTime?!0:(t.lastSent=s,t.once&&this.debouncedEvents.delete(e),!1)}async send(e){this.checkConfiguration();let t={eventType:this.defaults.eventType,eventMode:this.defaults.eventMode,ownerID:this.defaults.ownerID,created:new Date,...e,eventData:e.eventData||{}};return t.eventCode&&this.shouldDebounce(t.eventCode)?{success:!0,message:"Event debounced"}:(this.batchProcessor.add(t),{success:!0,message:"Event queued for sending"})}async sendBatch(e){if(e.length!==0)try{await this.post("/api/events/batch",{events:e})}catch(t){console.error("Failed to send event batch:",t)}}async success(e){return this.send({...e,statusCode:200})}async failure(e){return this.send({...e,statusCode:400})}async error(e){return this.send({...e,statusCode:400})}async critical(e){return this.send({...e,statusCode:500})}async infraction(e){return this.send({...e,statusCode:501})}async timeout(e){return this.send({...e,statusCode:502})}async modeChange(e){return this.send({...e,statusCode:300})}async flush(){await this.batchProcessor.flush()}get queueSize(){return this.batchProcessor.queueSize}clearDebounce(){this.debouncedEvents.clear()}reset(){this.clearDebounce(),this.defaults={}}},D=new g;var A=class extends p{defaults={};debouncer;lastLogHash=new Map;constructor(e){super(e)}setDefaults(e){this.defaults={...e},e.debounce&&(this.debouncer=new f(async t=>await this.sendLog(t),e.debounce))}createLogHash(e){return`${e.level}-${e.message}-${e.applicationName}-${e.statusCode}`}shouldDebounce(e){if(!this.defaults.debounce)return!1;let t=this.createLogHash(e),s=Date.now(),r=this.lastLogHash.get(t)||0;return s-r<this.defaults.debounce?!0:(this.lastLogHash.set(t,s),!1)}async message(e){this.checkConfiguration();let t={deviceId:this.defaults.deviceId||"",applicationName:this.defaults.applicationName,statusCode:this.defaults.statusCode,level:0,...e,message:e.message||""};if(!t.deviceId)throw new Error("deviceId is required for logging");if(!t.message)throw new Error("message is required for logging");return this.shouldDebounce(t)?{success:!0,message:"Log debounced"}:await this.sendLog(t)}async sendLog(e){let t={...e,timestamp:N(),environment:Deno.env.get("DENO_ENV")||"production"};try{return await this.post("/api/logs",t)}catch(s){return console.error("Failed to send log:",s),{success:!1,error:s instanceof Error?s.message:"Unknown error"}}}async information(e){return this.message({...e,level:0})}async delayed(e){return this.message({...e,level:1})}async error(e){return this.message({...e,level:2})}async critical(e){return this.message({...e,level:3})}async batch(e){this.checkConfiguration();let t=e.map(s=>({deviceId:this.defaults.deviceId||s.deviceId||"",applicationName:this.defaults.applicationName||s.applicationName,statusCode:this.defaults.statusCode,level:0,...s,message:s.message||"",timestamp:N()}));try{return await this.post("/api/logs/batch",{logs:t})}catch(s){return console.error("Failed to send batch logs:",s),{success:!1,error:s instanceof Error?s.message:"Unknown error"}}}clearDebounce(){this.lastLogHash.clear(),this.debouncer&&this.debouncer.reset()}reset(){this.clearDebounce(),this.defaults={},this.debouncer=void 0}getStats(){return{debounceActive:!!this.debouncer,cacheSize:this.lastLogHash.size,defaults:this.defaults}}},P=new A;var R=class extends p{onConnected=new h;onDisconnect=new h;onConfigRequired=new h;onCommand=new h;onFlightInfo=new h;onRefresh=new h;onPrint=new h;onRestart=new h;onNavigate=new h;ws=null;reconnectTimer=null;pingTimer=null;reconnectAttempts=0;maxReconnectAttempts=10;reconnectDelay=1e3;iotInfo={appName:"ElevationDenoService"};isConnected=!1;shouldReconnect=!0;constructor(e,t){super(e),t&&(this.iotInfo=t)}config(e,t){if(super.config(e),!e.iotEndpoint)throw new Error("iotEndpoint is required in CoreInfo for IOT service");if(!e.fingerPrint)throw new Error("fingerPrint is required in CoreInfo for IOT service");t&&(this.iotInfo=t),this.connect()}connect(){if(!(!this.coreInfo||!this.coreInfo.iotEndpoint))try{this.disconnect(!1);let e=new URL(this.coreInfo.iotEndpoint);e.searchParams.set("token",this.coreInfo.token),e.searchParams.set("fingerprint",this.coreInfo.fingerPrint),e.searchParams.set("appName",this.iotInfo.appName),e.searchParams.set("appVersion",this.iotInfo.appVersion||"1.0.0"),this.coreInfo.secondary&&e.searchParams.set("secondary","true"),this.ws=new WebSocket(e.toString()),this.ws.onopen=()=>this.handleOpen(),this.ws.onmessage=t=>this.handleMessage(t),this.ws.onclose=t=>this.handleClose(t),this.ws.onerror=t=>this.handleError(t)}catch(e){console.error("Failed to create WebSocket connection:",e),this.scheduleReconnect()}}handleOpen(){console.log("IOT WebSocket connected"),this.isConnected=!0,this.reconnectAttempts=0,this.send({type:"handshake",data:{fingerPrint:this.coreInfo.fingerPrint,appName:this.iotInfo.appName,appVersion:this.iotInfo.appVersion,secondary:this.coreInfo.secondary||!1}}),this.startPing()}handleMessage(e){try{let t=JSON.parse(e.data);switch(t.type){case"connected":this.onConnected.emit();break;case"config_required":this.onConfigRequired.emit();break;case"command":this.onCommand.emit(t.data),this.parseSpecialCommands(t.data);break;case"flight_info":this.onFlightInfo.emit(t.data);break;case"refresh":this.onRefresh.emit();break;case"print":this.onPrint.emit(t.data);break;case"pong":break;default:console.log("Unknown IOT message type:",t.type)}}catch(t){console.error("Failed to parse IOT message:",t)}}parseSpecialCommands(e){e.refresh&&this.onRefresh.emit(),e.restart&&this.onRestart.emit(),e.navigate&&this.onNavigate.emit(e.navigate),e.print&&this.onPrint.emit(e.print),e.flightInfo&&this.onFlightInfo.emit(e.flightInfo)}handleClose(e){console.log("IOT WebSocket closed:",e.code,e.reason),this.isConnected=!1,this.onDisconnect.emit(),this.stopPing(),this.shouldReconnect&&!e.wasClean&&this.scheduleReconnect()}handleError(e){console.error("IOT WebSocket error:",e)}scheduleReconnect(){if(this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.reconnectAttempts>=this.maxReconnectAttempts){console.error("Max reconnection attempts reached");return}this.reconnectAttempts++;let e=Math.min(this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1),3e4);console.log(`Reconnecting in ${e}ms (attempt ${this.reconnectAttempts})`),this.reconnectTimer=setTimeout(()=>{this.connect()},e)}startPing(){this.stopPing(),this.pingTimer=setInterval(()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.send({type:"ping"})},3e4)}stopPing(){this.pingTimer&&(clearInterval(this.pingTimer),this.pingTimer=null)}send(e){this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify(e))}sendCommand(e){this.send({type:"command",data:e})}sendEvent(e,t){this.send({type:"event",eventType:e,data:t})}disconnect(e=!1){this.shouldReconnect=e,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.stopPing(),this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1}reconnect(){this.shouldReconnect=!0,this.reconnectAttempts=0,this.connect()}getStatus(){return{connected:this.isConnected,reconnectAttempts:this.reconnectAttempts,endpoint:this.coreInfo?.iotEndpoint}}destroy(){this.disconnect(!1),this.onConnected.clear(),this.onDisconnect.clear(),this.onConfigRequired.clear(),this.onCommand.clear(),this.onFlightInfo.clear(),this.onRefresh.clear(),this.onPrint.clear(),this.onRestart.clear(),this.onNavigate.clear()}},b=new R;var _=class extends p{deviceCache=null;constructor(e){super(e)}config(e){if(super.config(e),!e.fingerPrint)throw new Error("fingerPrint is required in CoreInfo for Enrollment service")}async start(){this.checkConfiguration();let e=await this.post("/api/enrollment/start",{fingerPrint:this.coreInfo.fingerPrint,ipAddress:await this.getLocalIP(),macAddress:await this.getMacAddress()});if(e.success&&e.data)return this.deviceCache=e.data,e.data;throw new Error(e.error||"Failed to start enrollment")}async getLocations(){this.checkConfiguration();let e=await this.get("/api/locations");if(e.success&&e.data)return e.data;throw new Error(e.error||"Failed to get locations")}async getSpecification(){this.checkConfiguration();let e=await this.get("/api/specifications");if(e.success&&e.data)return e.data;throw new Error(e.error||"Failed to get specifications")}async enrollDevice(e){if(this.checkConfiguration(),!e.label)throw new Error("Device label is required");if(!e.location?.id)throw new Error("Location is required");if(!e.terminal?.id)throw new Error("Terminal is required");if(!e.specification?.id)throw new Error("Specification is required");if(!await this.isLabelAvailable(e.label))throw new Error(`Device label '${e.label}' is already in use`);let s={fingerPrint:this.coreInfo.fingerPrint,label:e.label,locationId:e.location.id,terminalId:e.terminal.id,specificationId:e.specification.id,deviceId:e.device?.id,ipAddress:await this.getLocalIP(),macAddress:await this.getMacAddress()},r=await this.post("/api/enrollment/enroll",s);return r.success&&(this.deviceCache=null),r}async isLabelAvailable(e){if(this.checkConfiguration(),!e)return!1;let t=await this.get(`/api/enrollment/check-label?label=${encodeURIComponent(e)}`);return t.success&&t.data?t.data.available:!1}async updateDevice(e){this.checkConfiguration();let t={...e,fingerPrint:this.coreInfo.fingerPrint};return await this.put("/api/enrollment/update",t)}async getDeviceInfo(){if(this.checkConfiguration(),this.deviceCache)return this.deviceCache;let e=await this.get(`/api/enrollment/device?fingerPrint=${encodeURIComponent(this.coreInfo.fingerPrint)}`);return e.success&&e.data?(this.deviceCache=e.data,e.data):null}async unenroll(){this.checkConfiguration();let e=await this.delete(`/api/enrollment/unenroll?fingerPrint=${encodeURIComponent(this.coreInfo.fingerPrint)}`);return e.success&&(this.deviceCache=null),e}async getTerminals(e){this.checkConfiguration();let t=await this.get(`/api/locations/${e}/terminals`);if(t.success&&t.data)return t.data;throw new Error(t.error||"Failed to get terminals")}async isEnrolled(){let e=await this.getDeviceInfo();return!!e&&!!e.id}async getLocalIP(){try{let e=await Deno.connect({hostname:"8.8.8.8",port:80}),t=e.localAddr;return e.close(),t.hostname}catch{return"127.0.0.1"}}async getMacAddress(){try{let t=await new Deno.Command("ifconfig",{args:[],stdout:"piped"}).output(),r=new TextDecoder().decode(t.stdout).match(/([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}/);if(r)return r[0]}catch{}return"00:00:00:00:00:00"}clearCache(){this.deviceCache=null}},d=new _;var T=class extends p{configInfo=null;cache;constructor(e,t){super(e),this.cache=new I(5*60*1e3),t&&(this.configInfo=t)}config(e,t){super.config(e),t&&this.setConfigInfo(t)}setConfigInfo(e){if(!e.deviceId||!e.locationId)throw new Error("Both deviceId and locationId are required in ConfigMgmtInfo");this.configInfo=e,this.cache.clear()}checkConfigInfo(){if(!this.configInfo)throw new Error("ConfigMgmtInfo not set. Call setConfigInfo() first")}async getAllConfigs(){this.checkConfiguration(),this.checkConfigInfo();let e=`all-${this.configInfo.deviceId}-${this.configInfo.locationId}`,t=this.cache.get(e);if(t)return t;let s=new URLSearchParams({deviceId:this.configInfo.deviceId,locationId:this.configInfo.locationId}),r=await this.get(`/api/config?${s.toString()}`);if(r.success&&r.data){this.cache.set(e,r.data);for(let[n,a]of Object.entries(r.data))this.cache.set(this.getCacheKey(n),a);return r.data}throw new Error(r.error||"Failed to get configurations")}async getConfig(e){this.checkConfiguration(),this.checkConfigInfo();let t=this.getCacheKey(e),s=this.cache.get(t);if(s)return s;let r=new URLSearchParams({key:e,deviceId:this.configInfo.deviceId,locationId:this.configInfo.locationId}),n=await this.get(`/api/config/${encodeURIComponent(e)}?${r.toString()}`);return n.success&&n.data?(this.cache.set(t,n.data),n.data):null}async getConfigs(e){this.checkConfiguration(),this.checkConfigInfo();let t={},s=[];for(let r of e){let n=this.cache.get(this.getCacheKey(r));n?t[r]=n:s.push(r)}if(s.length>0){let r=new URLSearchParams({deviceId:this.configInfo.deviceId,locationId:this.configInfo.locationId});s.forEach(a=>r.append("keys",a));let n=await this.post(`/api/config/batch?${r.toString()}`,{keys:s});if(n.success&&n.data)for(let[a,l]of Object.entries(n.data))this.cache.set(this.getCacheKey(a),l),t[a]=l}return t}async setConfig(e,t,s="device"){this.checkConfiguration(),this.checkConfigInfo();let r={key:e,value:t,type:s,deviceId:s==="device"?this.configInfo.deviceId:void 0,locationId:s==="location"?this.configInfo.locationId:void 0},n=await this.put(`/api/config/${encodeURIComponent(e)}`,r);return n.success&&(this.cache.delete(this.getCacheKey(e)),this.cache.delete(`all-${this.configInfo.deviceId}-${this.configInfo.locationId}`)),n}async deleteConfig(e){this.checkConfiguration(),this.checkConfigInfo();let t=new URLSearchParams({deviceId:this.configInfo.deviceId,locationId:this.configInfo.locationId}),s=await this.delete(`/api/config/${encodeURIComponent(e)}?${t.toString()}`);return s.success&&(this.cache.delete(this.getCacheKey(e)),this.cache.delete(`all-${this.configInfo.deviceId}-${this.configInfo.locationId}`)),s}getResolvedValue(e){return e.overrides?.device!==void 0?e.overrides.device:e.overrides?.location!==void 0?e.overrides.location:e.value}watchConfig(e,t,s=3e4){let r=null,n=async()=>{try{let l=await this.getConfig(e);JSON.stringify(l)!==JSON.stringify(r)&&(r=l,t(l))}catch(l){console.error("Error checking config:",l)}};n();let a=setInterval(n,s);return()=>clearInterval(a)}clearCache(){this.cache.clear()}getCacheStats(){return{size:this.cache.cache.size,ttl:this.cache.ttl}}getCacheKey(e){return`${e}-${this.configInfo.deviceId}-${this.configInfo.locationId}`}destroy(){this.cache.destroy()}},S=new T;var w=class{events=D;logs=P;iot=b;enrollment=d;config=S;initialize(e){this.events.config(e),this.logs.config(e),this.enrollment.config(e),e.iotEndpoint&&e.fingerPrint&&this.iot.config(e)}};export{p as BaseService,m as BatchProcessor,I as Cache,T as ConfigMgmt,f as Debouncer,_ as ElevatedEnrollment,g as ElevatedEvents,R as ElevatedIOT,A as ElevatedLogs,w as ElevationService,G as EventCode,h as EventEmitter,U as EventMode,F as EventType,y as LogLevel,O as RetryHandler,L as StatusCode,S as configMgmt,P as elogs,d as enrollment,D as events,b as iot,E as uuid};
//# sourceMappingURL=index.min.js.map
