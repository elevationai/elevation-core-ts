var F=(e=>(e[e.PNR_RETRIEVAL=1]="PNR_RETRIEVAL",e[e.BAGTAG_PRINT=2]="BAGTAG_PRINT",e[e.PAPER_LOW=3]="PAPER_LOW",e[e.PAPER_OUT=4]="PAPER_OUT",e[e.UPPER_DOOR_OPEN=5]="UPPER_DOOR_OPEN",e[e.UPPER_DOOR_CLOSED=6]="UPPER_DOOR_CLOSED",e[e.LOWER_DOOR_OPEN=7]="LOWER_DOOR_OPEN",e[e.LOWER_DOOR_CLOSED=8]="LOWER_DOOR_CLOSED",e[e.PASS_SCANNED=9]="PASS_SCANNED",e[e.ONLINE=10]="ONLINE",e[e.OFFLINE=11]="OFFLINE",e[e.IN_SERVICE=12]="IN_SERVICE",e[e.OUT_OF_SERVICE=13]="OUT_OF_SERVICE",e[e.PAPER_JAM=14]="PAPER_JAM",e[e.TOO_LATE_FOR_FLIGHT=15]="TOO_LATE_FOR_FLIGHT",e[e.TOO_EARLY_FOR_FLIGHT=16]="TOO_EARLY_FOR_FLIGHT",e[e.INCORRECT_LOCATION=17]="INCORRECT_LOCATION",e[e.RESERVATION_NOT_FOUND=18]="RESERVATION_NOT_FOUND",e[e.BOARDING_PASS_INVALID=19]="BOARDING_PASS_INVALID",e[e.NOT_CHECKED_IN=120]="NOT_CHECKED_IN",e[e.INELIGIBLE=121]="INELIGIBLE",e[e.INTERNATIONAL=122]="INTERNATIONAL",e[e.PREVIOUSLY_PRINTED=123]="PREVIOUSLY_PRINTED",e[e.NO_BAGS=64]="NO_BAGS",e[e.WRONG_AIRLINE=65]="WRONG_AIRLINE",e[e.PRINTER_FAILURE=66]="PRINTER_FAILURE",e[e.UNAUTHORIZED_CROSSING_ENTRANCE=20]="UNAUTHORIZED_CROSSING_ENTRANCE",e[e.UNAUTHORIZED_CROSSING_EXIT=21]="UNAUTHORIZED_CROSSING_EXIT",e[e.FRAUD_CRAWLING=22]="FRAUD_CRAWLING",e[e.FRAUD_JUMP=23]="FRAUD_JUMP",e[e.UNAUTHORIZED_STANDING_AT_ENTRANCE=24]="UNAUTHORIZED_STANDING_AT_ENTRANCE",e[e.UNAUTHORIZED_STANDING_AT_EXIT=25]="UNAUTHORIZED_STANDING_AT_EXIT",e[e.STOP_IN_GATE=26]="STOP_IN_GATE",e[e.ONE_BOARD_ONE_LEFT_ENTRANCE=27]="ONE_BOARD_ONE_LEFT_ENTRANCE",e[e.TWO_BOARDED=28]="TWO_BOARDED",e[e.ONE_BOARDED_ONE_CROSSED=29]="ONE_BOARDED_ONE_CROSSED",e[e.ONE_CROSSED_LEFT_ENTRANCE=30]="ONE_CROSSED_LEFT_ENTRANCE",e[e.ONE_BOARDED_THEN_LEFT_VIA_ENTRANCE=31]="ONE_BOARDED_THEN_LEFT_VIA_ENTRANCE",e[e.BOARDED_WITHOUT_AUTHORIZATION=32]="BOARDED_WITHOUT_AUTHORIZATION",e[e.CROSSING_ENTRANCE_TIMEOUT=33]="CROSSING_ENTRANCE_TIMEOUT",e[e.CROSSING_EXIT_TIMEOUT=34]="CROSSING_EXIT_TIMEOUT",e[e.EXIT_NOT_CLEARED_TIMEOUT=35]="EXIT_NOT_CLEARED_TIMEOUT",e[e.GATE_ENTRY_TIMEOUT=36]="GATE_ENTRY_TIMEOUT",e[e.GATE_CROSSING_TIMEOUT=37]="GATE_CROSSING_TIMEOUT",e[e.MANTRAP_VALIDATION_TIMEOUT=38]="MANTRAP_VALIDATION_TIMEOUT",e[e.EXIT_AREA_CLEAR=39]="EXIT_AREA_CLEAR",e[e.EXIT_AREA_OCCUPIED=40]="EXIT_AREA_OCCUPIED",e[e.SELF_BOARDING_COMPLETE=41]="SELF_BOARDING_COMPLETE",e[e.NO_PASS_FIRST_SENSOR=42]="NO_PASS_FIRST_SENSOR",e[e.NO_PASS_LAST_SENSOR=43]="NO_PASS_LAST_SENSOR",e[e.BOARDING_CANCELED=44]="BOARDING_CANCELED",e[e.SENSOR_FAILURE=45]="SENSOR_FAILURE",e[e.FLAPS_FAILURE=46]="FLAPS_FAILURE",e[e.PAPER_RESTOCK=47]="PAPER_RESTOCK",e[e.SESSION_TIME=48]="SESSION_TIME",e[e.ALARM=49]="ALARM",e[e.EXIT_BLOCKED=50]="EXIT_BLOCKED",e[e.INCORRECT_GATE=51]="INCORRECT_GATE",e[e.GATE_OPEN=52]="GATE_OPEN",e[e.GATE_CLOSED=53]="GATE_CLOSED",e[e.GATE_AUTHORIZED=54]="GATE_AUTHORIZED",e[e.EMERGENCY=55]="EMERGENCY",e[e.MAINTENANCE=56]="MAINTENANCE",e[e.BOARDING_PASS_PREVIOUSLY_USED=57]="BOARDING_PASS_PREVIOUSLY_USED",e[e.GATE_INOPERABLE=58]="GATE_INOPERABLE",e[e.GATE_EMPLOYEE_AUTHORIZED=59]="GATE_EMPLOYEE_AUTHORIZED",e[e.FREESTATE=60]="FREESTATE",e[e.CONTROLSTATE=61]="CONTROLSTATE",e[e.PRMMODE=62]="PRMMODE",e[e.AIRLINE_PASS=63]="AIRLINE_PASS",e[e.BOARDING_PASS_PRINT=68]="BOARDING_PASS_PRINT",e[e.APPLICATION_AVAILABLE=69]="APPLICATION_AVAILABLE",e[e.APPLICATION_UNAVAILABLE=70]="APPLICATION_UNAVAILABLE",e[e.APPLICATION_ACTIVE=71]="APPLICATION_ACTIVE",e[e.APPLICATION_STOP=72]="APPLICATION_STOP",e[e.PASSPORT_SCANNED=73]="PASSPORT_SCANNED",e[e.BAGTAG_PRINTER_ONLINE=74]="BAGTAG_PRINTER_ONLINE",e[e.BAGTAG_PRINTER_OFFLINE=75]="BAGTAG_PRINTER_OFFLINE",e[e.BARCODE_READER_ONLINE=76]="BARCODE_READER_ONLINE",e[e.BARCODE_READER_OFFLINE=77]="BARCODE_READER_OFFLINE",e[e.PASSPORT_READER_ONLINE=78]="PASSPORT_READER_ONLINE",e[e.PASSPORT_READER_OFFLINE=79]="PASSPORT_READER_OFFLINE",e[e.BOARDINGPASS_PRINTER_ONLINE=90]="BOARDINGPASS_PRINTER_ONLINE",e[e.BOARDINGPASS_PRINTER_OFFLINE=91]="BOARDINGPASS_PRINTER_OFFLINE",e[e.BOARDINGPASS_PRINTER_PAPER_OUT=92]="BOARDINGPASS_PRINTER_PAPER_OUT",e[e.BOARDINGPASS_PRINTER_PAPER_LOW=93]="BOARDINGPASS_PRINTER_PAPER_LOW",e[e.BOARDINGPASS_PRINTER_PAPER_JAM=94]="BOARDINGPASS_PRINTER_PAPER_JAM",e[e.BOARDINGPASS_PRINTER_PAPER_RESTOCK=95]="BOARDINGPASS_PRINTER_PAPER_RESTOCK",e[e.BOARDINGPASS_PRINTER_FAILURE=96]="BOARDINGPASS_PRINTER_FAILURE",e[e.CONFIGURATION_REQUESTED=103]="CONFIGURATION_REQUESTED",e[e.CONFIGURATION_COMPLETED=110]="CONFIGURATION_COMPLETED",e[e.PASSENGER_CHECK_IN=104]="PASSENGER_CHECK_IN",e[e.PASSENGER_CHECK_IN_FAILED=105]="PASSENGER_CHECK_IN_FAILED",e[e.BAGTAG_PRINT_FAILURE=106]="BAGTAG_PRINT_FAILURE",e[e.APPLICATION_ACTIVE_ACCESSIBLE=108]="APPLICATION_ACTIVE_ACCESSIBLE",e[e.APPLICATION_INITIALIZE=109]="APPLICATION_INITIALIZE",e[e.CARDREADER_ONLINE=111]="CARDREADER_ONLINE",e[e.CARDREADER_OFFLINE=112]="CARDREADER_OFFLINE",e[e.CARDREADER_FAILURE=113]="CARDREADER_FAILURE",e[e.CARDREADER_READ=114]="CARDREADER_READ",e[e.ANNOUNCEMENT_ONLINE=115]="ANNOUNCEMENT_ONLINE",e[e.ANNOUNCEMENT_OFFLINE=116]="ANNOUNCEMENT_OFFLINE",e[e.KEYPAD_ONLINE=117]="KEYPAD_ONLINE",e[e.KEYPAD_OFFLINE=118]="KEYPAD_OFFLINE",e[e.ILLUMINATION_ONLINE=119]="ILLUMINATION_ONLINE",e[e.ILLUMINATION_OFFLINE=124]="ILLUMINATION_OFFLINE",e[e.HEADSET_ONLINE=125]="HEADSET_ONLINE",e[e.HEADSET_OFFLINE=126]="HEADSET_OFFLINE",e[e.FEEDER_ONLINE=127]="FEEDER_ONLINE",e[e.FEEDER_OFFLINE=128]="FEEDER_OFFLINE",e[e.DISPENSER_ONLINE=129]="DISPENSER_ONLINE",e[e.DISPENSER_OFFLINE=130]="DISPENSER_OFFLINE",e[e.NO_DOCV=131]="NO_DOCV",e[e.DOCS_VERIFIED_PRINTING_ALLOWED=132]="DOCS_VERIFIED_PRINTING_ALLOWED",e[e.GROUP_BOOKING_NOT_SUPPORTED=135]="GROUP_BOOKING_NOT_SUPPORTED",e[e.ERROR_GENERIC=400]="ERROR_GENERIC",e[e.USER_LOGIN=107]="USER_LOGIN",e[e.TEST_ENV=215]="TEST_ENV",e[e.AGENT_LOGIN_ACTIVATION=200]="AGENT_LOGIN_ACTIVATION",e[e.AGENT_LOGOUT_ACTIVATION=201]="AGENT_LOGOUT_ACTIVATION",e[e.PAX_ACTIVATION_TIME=202]="PAX_ACTIVATION_TIME",e[e.BAG_TAG_NOT_FOUND=204]="BAG_TAG_NOT_FOUND",e[e.EXPIRED_DRIVERS_LICENSE=205]="EXPIRED_DRIVERS_LICENSE",e[e.VALID_DRIVERS_LICENSE=206]="VALID_DRIVERS_LICENSE",e[e.NOT_PART_OF_RESERVATION=207]="NOT_PART_OF_RESERVATION",e[e.ID_MATCH_NOT_FOUND=208]="ID_MATCH_NOT_FOUND",e[e.BAG_ALREADY_ACTIVATED=209]="BAG_ALREADY_ACTIVATED",e[e.UNABLE_TO_ACTIVATE_BAG=210]="UNABLE_TO_ACTIVATE_BAG",e[e.INVALID_BAGTAG=216]="INVALID_BAGTAG",e[e.BOARDED=211]="BOARDED",e[e.BEGIN_BOARDING_FAILED=212]="BEGIN_BOARDING_FAILED",e[e.BOARDING_ENDED=213]="BOARDING_ENDED",e[e.BOARDING_FAILED=214]="BOARDING_FAILED",e[e.INVALID_BOARDING_PASS=217]="INVALID_BOARDING_PASS",e[e.FLIGHT_SCANNED_MISMATCH=218]="FLIGHT_SCANNED_MISMATCH",e[e.SCANNED_WITHOUT_STARTING=219]="SCANNED_WITHOUT_STARTING",e[e.BOARDING_STARTED=220]="BOARDING_STARTED",e[e.ZONING_ATTEMPT_FAILED=221]="ZONING_ATTEMPT_FAILED",e[e.ZONING_CHNAGE=222]="ZONING_CHNAGE",e[e.ZONING_TIME=223]="ZONING_TIME",e[e.FLIGHT_ROOM_JOINED=224]="FLIGHT_ROOM_JOINED",e[e.FLIGHT_ROOM_LEFT=225]="FLIGHT_ROOM_LEFT",e[e.MANIFEST_SUCCESS=226]="MANIFEST_SUCCESS",e[e.MANIFEST_ERROR=227]="MANIFEST_ERROR",e[e.SOCKET_COMMAND=228]="SOCKET_COMMAND",e[e.REQUEST_PROFILING=203]="REQUEST_PROFILING",e[e.FAILED_TO_READ_BAG_TAG=300]="FAILED_TO_READ_BAG_TAG",e[e.BAG_TAG_FOUND=301]="BAG_TAG_FOUND",e[e.BAG_SETTLED=302]="BAG_SETTLED",e[e.BAG_AT_ENTRY=303]="BAG_AT_ENTRY",e[e.BAG_IN_HOLDING_AREA=304]="BAG_IN_HOLDING_AREA",e[e.WAITING_ON_BHS=305]="WAITING_ON_BHS",e[e.INTRUSION_DETECTED=306]="INTRUSION_DETECTED",e[e.NO_BAG_DETECTED=307]="NO_BAG_DETECTED",e[e.TRYING_TO_ACQUIRE_BAG_TAG=308]="TRYING_TO_ACQUIRE_BAG_TAG",e[e.BAG_RELEASED=309]="BAG_RELEASED",e[e.MOVE_TO_HOLDING_AREA=310]="MOVE_TO_HOLDING_AREA",e[e.CANCEL_NEED_INTERVENTION=311]="CANCEL_NEED_INTERVENTION",e[e.CANCEL_PASSENGER_CAN_FIX=312]="CANCEL_PASSENGER_CAN_FIX",e[e.MULTIPLE_BAG_TAGS_ERROR=313]="MULTIPLE_BAG_TAGS_ERROR",e[e.MULTIPLE_BAGS_ERROR=314]="MULTIPLE_BAGS_ERROR",e[e.HOLDING_AREA_FULL=315]="HOLDING_AREA_FULL",e[e.BAG_CANNOT_RELEASE=316]="BAG_CANNOT_RELEASE",e[e.BAG_CANNOT_PROCESS=317]="BAG_CANNOT_PROCESS",e[e.CONVEY_BELT_INOPERABLE=318]="CONVEY_BELT_INOPERABLE",e[e.UNKNOWN_SBD_ERROR=319]="UNKNOWN_SBD_ERROR",e[e.BAG_OVER_LENGTH=320]="BAG_OVER_LENGTH",e[e.BAG_OVER_HEIGHT=321]="BAG_OVER_HEIGHT",e[e.BAG_JAMMED_INSIDE=322]="BAG_JAMMED_INSIDE",e[e.UNEXPECTED_BAG_IN_REAR=323]="UNEXPECTED_BAG_IN_REAR",e[e.BAG_TOO_FLAT=324]="BAG_TOO_FLAT",e[e.BAG_TOO_SHORT=325]="BAG_TOO_SHORT",e[e.BAG_OVERWEIGHT=326]="BAG_OVERWEIGHT",e[e.BAG_UNDERWEIGHT=327]="BAG_UNDERWEIGHT",e[e.BAG_NOT_SETTLED=328]="BAG_NOT_SETTLED",e[e.BAG_NOT_CONVEYABLE=329]="BAG_NOT_CONVEYABLE",e[e.BHS_OFFLINE=330]="BHS_OFFLINE",e[e.BHS_BUSY=331]="BHS_BUSY",e[e.FRONT_BAG_BLOCKING_REAR_RETURN=332]="FRONT_BAG_BLOCKING_REAR_RETURN",e[e.TECHNICAL_ERROR=333]="TECHNICAL_ERROR",e[e.BAG_UNEXPECTEDLY_REMOVED=334]="BAG_UNEXPECTEDLY_REMOVED",e))(F||{});var x=(o=>(o[o.CUSS=1]="CUSS",o[o.NONCUSS=2]="NONCUSS",o[o.SELF_BOARDING_MODE=5]="SELF_BOARDING_MODE",o[o.LOCKED_MODE=6]="LOCKED_MODE",o[o.OPEN_MODE=7]="OPEN_MODE",o[o.DEBOARDING_MODE=8]="DEBOARDING_MODE",o[o.EMERGENCY_MODE=9]="EMERGENCY_MODE",o[o.MAINTENANCE_MODE=10]="MAINTENANCE_MODE",o))(x||{});var U=(a=>(a[a.TAGGING_KIOSK=1]="TAGGING_KIOSK",a[a.CHECKIN_KIOSK=2]="CHECKIN_KIOSK",a[a.GATE=3]="GATE",a[a.ADMIN_PANEL=4]="ADMIN_PANEL",a[a.HUB=5]="HUB",a[a.CUSTOM_APP=6]="CUSTOM_APP",a[a.PLATFORM=7]="PLATFORM",a[a.PROXY=8]="PROXY",a[a.EXTERNAL_API=9]="EXTERNAL_API",a))(U||{});var y=(n=>(n[n.SUCCESS=200]="SUCCESS",n[n.MODE_CHANGE=300]="MODE_CHANGE",n[n.FAILURE=400]="FAILURE",n[n.CRITICAL_FAILURE=500]="CRITICAL_FAILURE",n[n.INFRACTION=501]="INFRACTION",n[n.TIMEOUT=502]="TIMEOUT",n))(y||{});var E=(s=>(s.INFO="INFO",s.DELAYED="DELAYED",s.ERROR="ERROR",s.CRITICAL="CRITICAL",s))(E||{});function B(){return crypto.randomUUID()}var f=class{constructor(i,t){this.fn=i;this.delay=t}timeoutId=null;lastCall=0;call(...i){let t=Date.now();t-this.lastCall<this.delay||(this.timeoutId&&clearTimeout(this.timeoutId),this.lastCall=t,this.fn(...i))}async callAsync(...i){let t=Date.now();if(!(t-this.lastCall<this.delay))return this.timeoutId&&clearTimeout(this.timeoutId),this.lastCall=t,await this.fn(...i)}reset(){this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null),this.lastCall=0}},l=class{listeners=[];subscribe(i){return this.listeners.push(i),()=>{let t=this.listeners.indexOf(i);t>-1&&this.listeners.splice(t,1)}}emit(i){this.listeners.forEach(t=>t(i))}clear(){this.listeners=[]}get listenerCount(){return this.listeners.length}},N=class{constructor(i=6e4,t=!0){this.ttl=i;t&&this.startAutoCleanup()}cache=new Map;cleanupInterval=null;set(i,t,r){let s=Date.now()+(r||this.ttl);this.cache.set(i,{value:t,expires:s})}get(i){let t=this.cache.get(i);if(t){if(Date.now()>t.expires){this.cache.delete(i);return}return t.value}}has(i){return this.get(i)!==void 0}delete(i){return this.cache.delete(i)}clear(){this.cache.clear()}startAutoCleanup(){this.cleanupInterval=setInterval(()=>{let i=Date.now();for(let[t,r]of this.cache.entries())i>r.expires&&this.cache.delete(t)},this.ttl)}destroy(){this.cleanupInterval&&(clearInterval(this.cleanupInterval),this.cleanupInterval=null),this.clear()}};function w(u=new Date){return u.toISOString()}var c=class{coreInfo=null;configured=!1;headers=new Headers;config(i){this.validateCoreInfo(i),this.coreInfo=i,this.setupHeaders(),this.configured=!0}validateCoreInfo(i){if(!i.token)throw new Error("Token is required in CoreInfo");if(!i.serviceEndpoint)throw new Error("Service endpoint is required in CoreInfo")}setupHeaders(){this.coreInfo&&(this.headers=new Headers({"Elevated-Auth":btoa(this.coreInfo.token)}))}checkConfiguration(){if(!this.configured||!this.coreInfo)throw new Error("Service not configured. Call config() first with CoreInfo")}async makeRequest(i,t={}){this.checkConfiguration();let r=`${this.coreInfo.serviceEndpoint}${i}`,s=this.coreInfo.timeout||3e4,h=new AbortController,n=setTimeout(()=>h.abort(),s);try{let p=await fetch(r,{...t,headers:{...Object.fromEntries(this.headers.entries()),...Object.fromEntries(new Headers(t.headers||{}).entries())},signal:h.signal});if(clearTimeout(n),!p.ok)throw new Error(`HTTP error! status: ${p.status}`);return{success:!0,data:await p.json()}}catch(p){return clearTimeout(n),p instanceof Error?p.name==="AbortError"?{success:!1,error:"Request timeout",message:`Request timed out after ${s}ms`}:{success:!1,error:p.message}:{success:!1,error:"Unknown error occurred"}}}async post(i,t){return this.makeRequest(i,{method:"POST",body:JSON.stringify(t)})}async patch(i,t){return this.makeRequest(i,{method:"PATCH",body:JSON.stringify(t)})}async get(i,t){return this.makeRequest(i,{method:"GET",headers:t})}async put(i,t){return this.makeRequest(i,{method:"PUT",body:JSON.stringify(t)})}async delete(i){return this.makeRequest(i,{method:"DELETE"})}};var g=class extends c{defaults={};debouncedEvents=new Map;setDefaults(i){this.defaults={...i},i.debounceEvent&&i.debounceEvent.forEach(({eventCode:t,debounce:r})=>{this.debouncedEvents.set(t,{eventCode:t,lastSent:0,debounceTime:r,once:!1})}),i.debounceOnce&&i.debounceOnce.forEach(({eventCode:t,debounce:r})=>{this.debouncedEvents.set(t,{eventCode:t,lastSent:0,debounceTime:r,once:!0})})}shouldDebounce(i){let t=this.debouncedEvents.get(i);if(!t)return!1;let r=Date.now();return r-t.lastSent<t.debounceTime?!0:(t.lastSent=r,t.once&&this.debouncedEvents.delete(i),!1)}async send(i,t=null){this.checkConfiguration();let r={eventType:this.defaults.eventType,eventMode:this.defaults.eventMode,ownerID:this.defaults.ownerID,created:new Date,...i,eventData:i.eventData||{}};if(!r.metaData){let s={};r.eventCode&&(s.eventCode=r.eventCode),r.eventData&&r.eventData.airline&&(s.airline=r.eventData.airline),r.eventData&&r.eventData.countryCode&&(s.countryCode=r.eventData.countryCode),r.ownerID&&(s.ownerID=r.ownerID),t&&(s.tags=t.tags||[],s.location=t.location||null,s.testDevice=!!t.metadata.testDevice),r.metaData=s}if(r.eventCode&&this.shouldDebounce(r.eventCode))return{success:!0,message:"Event debounced"};try{return await this.post("/events",r)}catch(s){return console.error("Failed to send event:",s),{success:!1,error:"Failed to send event"}}}async success(i){return this.send({...i,statusCode:200})}async failure(i){return this.send({...i,statusCode:400})}async error(i){return this.send({...i,statusCode:400})}async critical(i){return this.send({...i,statusCode:500})}async infraction(i){return this.send({...i,statusCode:501})}async timeout(i){return this.send({...i,statusCode:502})}async modeChange(i){return this.send({...i,statusCode:300})}addDebounce(i){i.forEach(({eventCode:t,debounce:r})=>{this.debouncedEvents.set(t,{eventCode:t,lastSent:0,debounceTime:r,once:!1})})}addDebounceOnce(i){i.forEach(({eventCode:t,debounce:r})=>{this.debouncedEvents.set(t,{eventCode:t,lastSent:0,debounceTime:r,once:!0})})}clearDebounce(){this.debouncedEvents.clear()}reset(){this.clearDebounce(),this.defaults={}}},O=new g;var m=class extends c{defaults={};debouncer;lastLogHash=new Map;setDefaults(i){this.defaults={...i},i.debounce&&(this.debouncer=new f(async t=>await this.sendLog(t),i.debounce))}createLogHash(i){return`${i.level}-${i.message}-${i.applicationName}-${i.statusCode}`}shouldDebounce(i){if(!this.defaults.debounce)return!1;let t=this.createLogHash(i),r=Date.now(),s=this.lastLogHash.get(t)||0;return r-s<this.defaults.debounce?!0:(this.lastLogHash.set(t,r),!1)}async message(i){this.checkConfiguration();let t={deviceId:this.defaults.deviceId||"",applicationName:this.defaults.applicationName,statusCode:this.defaults.statusCode,level:"INFO",...i,message:i.message||""};if(!t.deviceId)throw new Error("deviceId is required for logging");if(!t.message)throw new Error("message is required for logging");return this.shouldDebounce(t)?{success:!0,message:"Log debounced"}:await this.sendLog(t)}async sendLog(i){let t={...i,timestamp:w(),environment:Deno.env.get("DENO_ENV")||"production"};try{return await this.post(`${this.coreInfo?.serviceEndpoint}/logs`,t)}catch(r){return console.error("Failed to send log:",r),{success:!1,error:r instanceof Error?r.message:"Unknown error"}}}async information(i){return this.message({...i,level:"INFO"})}async delayed(i){return this.message({...i,level:"DELAYED"})}async error(i){return this.message({...i,level:"ERROR"})}async critical(i){return this.message({...i,level:"CRITICAL"})}async batch(i){this.checkConfiguration();try{let r=(await Promise.all(i.map(s=>this.message(s)))).filter(s=>!s.success);return r.length===0?{success:!0,message:`Successfully sent ${i.length} logs`}:{success:!1,error:`Failed to send ${r.length} of ${i.length} logs`,data:{failures:r}}}catch(t){return console.error("Failed to send batch logs:",t),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}}clearDebounce(){this.lastLogHash.clear(),this.debouncer&&this.debouncer.reset()}reset(){this.clearDebounce(),this.defaults={},this.debouncer=void 0}getStats(){return{debounceActive:!!this.debouncer,cacheSize:this.lastLogHash.size,defaults:this.defaults}}},D=new m;var I=class extends c{onConnected=new l;onDisconnect=new l;onConfigRequired=new l;onCommand=new l;onFlightInfo=new l;onRefresh=new l;onPrint=new l;onRestart=new l;onNavigate=new l;ws=null;reconnectTimer=null;pingTimer=null;reconnectAttempts=0;maxReconnectAttempts=10;reconnectDelay=1e3;iotInfo={appName:"ElevationDenoService"};isConnected=!1;shouldReconnect=!0;config(i,t){if(super.config(i),!i.iotEndpoint)throw new Error("iotEndpoint is required in CoreInfo for IOT service");if(!i.fingerPrint)throw new Error("fingerPrint is required in CoreInfo for IOT service");t&&(this.iotInfo=t),this.connect()}connect(){if(!(!this.coreInfo||!this.coreInfo.iotEndpoint))try{this.disconnect(!1);let i=new URL(this.coreInfo.iotEndpoint);i.searchParams.set("token",this.coreInfo.token),i.searchParams.set("fingerprint",this.coreInfo.fingerPrint),i.searchParams.set("appName",this.iotInfo.appName),i.searchParams.set("appVersion",this.iotInfo.appVersion||"1.0.0"),this.coreInfo.secondary&&i.searchParams.set("secondary","true"),this.ws=new WebSocket(i.toString()),this.ws.onopen=()=>this.handleOpen(),this.ws.onmessage=t=>this.handleMessage(t),this.ws.onclose=t=>this.handleClose(t),this.ws.onerror=t=>this.handleError(t)}catch(i){console.error("Failed to create WebSocket connection:",i),this.scheduleReconnect()}}handleOpen(){console.log("IOT WebSocket connected"),this.isConnected=!0,this.reconnectAttempts=0,this.send({type:"handshake",data:{fingerPrint:this.coreInfo.fingerPrint,appName:this.iotInfo.appName,appVersion:this.iotInfo.appVersion,secondary:this.coreInfo.secondary||!1}}),this.startPing()}handleMessage(i){try{let t=JSON.parse(i.data);switch(t.type){case"connected":this.onConnected.emit();break;case"config_required":this.onConfigRequired.emit();break;case"command":this.onCommand.emit(t.data),this.parseSpecialCommands(t.data);break;case"flight_info":this.onFlightInfo.emit(t.data);break;case"refresh":this.onRefresh.emit();break;case"print":this.onPrint.emit(t.data);break;case"pong":break;default:console.log("Unknown IOT message type:",t.type)}}catch(t){console.error("Failed to parse IOT message:",t)}}parseSpecialCommands(i){i.refresh&&this.onRefresh.emit(),i.restart&&this.onRestart.emit(),i.navigate&&this.onNavigate.emit(i.navigate),i.print&&this.onPrint.emit(i.print),i.flightInfo&&this.onFlightInfo.emit(i.flightInfo)}handleClose(i){console.log("IOT WebSocket closed:",i.code,i.reason),this.isConnected=!1,this.onDisconnect.emit(),this.stopPing(),this.shouldReconnect&&!i.wasClean&&this.scheduleReconnect()}handleError(i){console.error("IOT WebSocket error:",i)}scheduleReconnect(){if(this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.reconnectAttempts>=this.maxReconnectAttempts){console.error("Max reconnection attempts reached");return}this.reconnectAttempts++;let i=Math.min(this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1),3e4);console.log(`Reconnecting in ${i}ms (attempt ${this.reconnectAttempts})`),this.reconnectTimer=setTimeout(()=>{this.connect()},i)}startPing(){this.stopPing(),this.pingTimer=setInterval(()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.send({type:"ping"})},3e4)}stopPing(){this.pingTimer&&(clearInterval(this.pingTimer),this.pingTimer=null)}send(i){this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify(i))}sendCommand(i){this.send({type:"command",data:i})}sendEvent(i,t){this.send({type:"event",eventType:i,data:t})}disconnect(i=!1){this.shouldReconnect=i,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.stopPing(),this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1}reconnect(){this.shouldReconnect=!0,this.reconnectAttempts=0,this.connect()}getStatus(){return{connected:this.isConnected,reconnectAttempts:this.reconnectAttempts,endpoint:this.coreInfo?.iotEndpoint}}destroy(){this.disconnect(!1),this.onConnected.clear(),this.onDisconnect.clear(),this.onConfigRequired.clear(),this.onCommand.clear(),this.onFlightInfo.clear(),this.onRefresh.clear(),this.onPrint.clear(),this.onRestart.clear(),this.onNavigate.clear()}},b=new I;var A=class extends c{started=!1;config(i){if(super.config(i),!i.fingerPrint)throw new Error("fingerPrint is required in CoreInfo for Enrollment service")}async start(){this.checkConfiguration();let i=await this.get(`${this.coreInfo?.serviceEndpoint}/devices/key`);if(i.success&&i.data){let t=i.data[0];if(t.metadata?.configured)throw new Error("Device is already enrolled");return this.started=!0,t}throw new Error(i.error||"Failed to start enrollment")}async getLocations(){this.checkConfiguration();let i=await this.get(`${this.coreInfo?.serviceEndpoint}/locations`);if(i.success&&i.data)return i.data;throw new Error(i.error||"Failed to get locations")}async getSpecification(){this.checkConfiguration();let i=await this.get(`${this.coreInfo?.serviceEndpoint}/speficiations`);if(i.success&&i.data)return i.data;throw new Error(i.error||"Failed to get specifications")}async enrollDevice(i){if(this.checkConfiguration(),!this.started)throw new Error("start subscription first");if(!i.label)throw new Error("Device label is required");if(!i.device?._id)throw new Error("Missing Device information");if(!i.location?._id)throw new Error("Location is required");if(!i.terminal?._id)throw new Error("Terminal is required");if(!i.specification?.id)throw new Error("Specification is required");if(!await this.isLabelAvailable(i.label))throw new Error(`Device label '${i.label}' is already in use`);return i.device.label=i.label,i.device.location=i.location._id,i.device.terminal=i.terminal._id,i.specification&&(i.device.hardware={model:i.specification.model}),i.metadata&&(i.device.metadata=i.metadata),i.location?.configurations&&(i.device.configurations={...i.location.configurations,...i.device.configurations}),await this.patch(`${this.coreInfo?.serviceEndpoint}/devices/${i.device._id}`,i.device)}async isLabelAvailable(i){if(this.checkConfiguration(),!i)return!1;let t=await this.get(`${this.coreInfo?.serviceEndpoint}/devices/label/${i}`,{});return t.success&&t.data?t.data.length===0:!1}},S=new A;var _=class extends c{configInfo=null;config(i,t){super.config(i),t&&this.setConfigInfo(t)}setConfigInfo(i){if(!i.deviceId||!i.locationId)throw new Error("Both deviceId and locationId are required in ElevatedConfigurationsInfo");this.configInfo=i}checkConfigInfo(){if(!this.configInfo)throw new Error("ElevatedConfigurationsInfo not set. Call setConfigInfo() first")}async getConfig(i){return this.checkConfiguration(),this.checkConfigInfo(),this.get(`${this.coreInfo?.serviceEndpoint}/configurations/${i}/${this.configInfo?.locationId}/${this.configInfo?.deviceId}`).then(t=>t.data||null).catch(t=>(console.error("Error fetching configuration:",t),null))}async getConfigs(i){return Promise.all(i.map(t=>this.getConfig(t)))}},P=new _;var R=class extends c{stringsObservable=new l;cmsCache=new Map;allStrings=null;reqHeaderNoCache={"Cache-Control":"no-cache"};config(i){super.config(i),this.refreshInfo(i)}refreshInfo(i){this.config(i)}async getKey(i,t,r=!1){if(this.checkConfiguration(),!r){let s=this.cmsCache.get(`${i}-${t}`),h=this.cmsCache.get(`${i}-en-US`);return s!==void 0?s:h!==void 0?h:null}if(!this.allStrings||this.allStrings.length===0||r){await this.loadAllStrings(r);let s=this.cmsCache.get(`${i}-${t}`),h=this.cmsCache.get(`${i}-en-US`),n=s!==void 0?s:h!==void 0?h:null;return r&&n?JSON.parse(n):n}return null}async getString(i,t){let r=await this.getKey(i,t,!1);return typeof r=="string"?r:r?.content||null}async getConfig(i,t){let r=await this.getKey(i,t,!0);return typeof r=="string"?r:r?.content||null}async loadAllStrings(i=!1){this.checkConfiguration();try{let t=await this.get(`${this.coreInfo?.serviceEndpoint}/strings`,i?this.reqHeaderNoCache:void 0);t.success&&t.data&&(this.allStrings=t.data,this.stringsObservable.emit(this.allStrings),this.updateCacheFromStrings(this.allStrings))}catch(t){console.error("Failed to load CMS strings:",t),this.stringsObservable.emit(null)}}getAllStrings(){return this.allStrings}clearCache(){this.cmsCache.clear()}getCacheStats(){return{size:this.cmsCache.size,keys:Array.from(this.cmsCache.keys())}}updateCacheFromStrings(i){for(let t of i)for(let[r,s]of Object.entries(t.languages)){let h=s.versions.find(n=>n.published)||s.versions[0];if(h){let n=`${t.element}-${r}`;this.cmsCache.set(n,h.string)}}}destroy(){this.clearCache(),this.stringsObservable.clear(),this.allStrings=null}},d=new R;var T=class extends c{touchPointId=null;getDeviceByFingerPrint(){if(this.checkConfiguration(),!this.coreInfo?.fingerPrint)throw new Error("Device fingerprint is required for TouchPoint service");return this.get(`${this.coreInfo?.serviceEndpoint}/devices/key/${this.coreInfo.fingerPrint}`).then(i=>{if(i.data?.length){let t=i.data[0];return t&&(this.touchPointId=t._id),t}return null}).catch(i=>(console.error(i),null))}async getInfo(){return this.getDeviceByFingerPrint()}async inService(i,t){if(this.checkConfiguration(),!this.coreInfo?.fingerPrint)throw new Error("Device fingerprint is required for TouchPoint service");try{if(this.touchPointId||await this.getDeviceByFingerPrint(),!this.touchPointId)return;await this.post(`${this.coreInfo.serviceEndpoint}/devices/service`,{id:this.touchPointId,state:i,reason:t})}catch(r){console.error(`Unable to transition to state: ${i} ${r}`)}}},L=new T;var G=class{events=O;logs=D;iot=b;enrollment=S;config=P;cms=d;touchPoint=L;initialize(i){this.events.config(i),this.logs.config(i),this.enrollment.config(i),this.cms.config(i),this.touchPoint.config(i),i.iotEndpoint&&i.fingerPrint&&this.iot.config(i)}};export{R as CMS,N as Cache,f as Debouncer,_ as ElevatedConfigurations,A as ElevatedEnrollment,g as ElevatedEvents,I as ElevatedIOT,m as ElevatedLogs,G as ElevationService,F as EventCode,l as EventEmitter,x as EventMode,U as EventType,E as LogLevel,y as StatusCode,T as TouchPoint,d as cms,P as elevatedConfigurations,D as elogs,S as enrollment,O as events,b as iot,L as touchPoint,B as uuid};
//# sourceMappingURL=index.min.js.map
